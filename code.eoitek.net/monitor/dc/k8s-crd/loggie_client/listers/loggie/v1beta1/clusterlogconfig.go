/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "code.eoitek.net/monitor/dc/k8s-crd/apis/loggie/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterLogConfigLister helps list ClusterLogConfigs.
// All objects returned here must be treated as read-only.
type ClusterLogConfigLister interface {
	// List lists all ClusterLogConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ClusterLogConfig, err error)
	// ClusterLogConfigs returns an object that can list and get ClusterLogConfigs.
	ClusterLogConfigs(namespace string) ClusterLogConfigNamespaceLister
	ClusterLogConfigListerExpansion
}

// clusterLogConfigLister implements the ClusterLogConfigLister interface.
type clusterLogConfigLister struct {
	indexer cache.Indexer
}

// NewClusterLogConfigLister returns a new ClusterLogConfigLister.
func NewClusterLogConfigLister(indexer cache.Indexer) ClusterLogConfigLister {
	return &clusterLogConfigLister{indexer: indexer}
}

// List lists all ClusterLogConfigs in the indexer.
func (s *clusterLogConfigLister) List(selector labels.Selector) (ret []*v1beta1.ClusterLogConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterLogConfig))
	})
	return ret, err
}

// ClusterLogConfigs returns an object that can list and get ClusterLogConfigs.
func (s *clusterLogConfigLister) ClusterLogConfigs(namespace string) ClusterLogConfigNamespaceLister {
	return clusterLogConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterLogConfigNamespaceLister helps list and get ClusterLogConfigs.
// All objects returned here must be treated as read-only.
type ClusterLogConfigNamespaceLister interface {
	// List lists all ClusterLogConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ClusterLogConfig, err error)
	// Get retrieves the ClusterLogConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ClusterLogConfig, error)
	ClusterLogConfigNamespaceListerExpansion
}

// clusterLogConfigNamespaceLister implements the ClusterLogConfigNamespaceLister
// interface.
type clusterLogConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterLogConfigs in the indexer for a given namespace.
func (s clusterLogConfigNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ClusterLogConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterLogConfig))
	})
	return ret, err
}

// Get retrieves the ClusterLogConfig from the indexer for a given namespace and name.
func (s clusterLogConfigNamespaceLister) Get(name string) (*v1beta1.ClusterLogConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("clusterlogconfig"), name)
	}
	return obj.(*v1beta1.ClusterLogConfig), nil
}
